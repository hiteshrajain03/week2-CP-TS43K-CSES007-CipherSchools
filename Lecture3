Q1 (Merge Intervals) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> v;
        v.push_back(intervals[0]);
        for(int i = 1; i < intervals.size(); i++) {
            if(intervals[i][0] <= v[v.size()-1][1]) {
                v[v.size()-1][1] = max(intervals[i][1], v[v.size()-1][1]);
            }
            else {
                v.push_back(intervals[i]);
            }
        }
        return v;
    }
};

Q2 (Top k frequent elements) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> hash;
        for(int x : nums){
            if (hash.count(x)==0) hash[x]=1;
            else hash[x]++;
        }

        auto bigger=[&](int i, int j){ return hash[i]> hash[j]; };
  
        priority_queue<int, vector<int>, decltype(bigger)> pq(bigger);
        for (auto& [key, v]: hash){
            pq.push(key);
            if (pq.size()>k) pq.pop();
        }
        vector<int> ans(k);
        copy(&(pq.top()), &(pq.top())+k, &ans[0]);

        return ans;
    }
};


