Q1 (Inorder Traversal) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    void dfs(TreeNode* root, vector<int> &v) {
        if(root == NULL) {
            return;
        }
        dfs(root->left, v);
        v.push_back(root->val);
        dfs(root->right, v);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        dfs(root, v);
        return v;
    }
};

Q2 (Preorder Traversal) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    void dfs(TreeNode* root, vector<int> &v) {
        if(root == NULL) {
            return;
        }
        dfs(root->left, v);
        v.push_back(root->val);
        dfs(root->right, v);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        dfs(root, v);
        return v;
    }
};

Q3 (Postorder Traversl) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    void dfs(TreeNode* root, vector<int> &v) {
        if(root == NULL) {
            return;
        }
        dfs(root->left, v);
        dfs(root->right, v);
        v.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        dfs(root, v);
        return v;
    }
};




