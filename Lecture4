Q1 (Next Greater ekement) ////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size(),m=nums2.size();
        stack<int> st;
        unordered_map<int,int> mp;
        for(int i=m-1;i>=0;i--){
            while(!st.empty() && st.top()<=nums2[i]) st.pop();
            if(st.empty()) mp[nums2[i]]=-1;
            else mp[nums2[i]]=st.top();
            st.push(nums2[i]);
        }
        vector<int> ans(n,0);
        for(int i=0;i<n;i++){
            ans[i]=mp[nums1[i]];
        }
        return ans;
    }
};

Q2 (next samller element) /////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int maxSumMinProduct(vector<int>& A) {
        long long mod = 1e9+7, N = A.size(), ans = 0;
        vector<long long> sum(N + 1);
        for (int i = 0; i < N; ++i) sum[i + 1] = sum[i] + A[i];
        vector<int> prev(N, -1), next(N, -1);
        vector<int> s;
        for (int i = 0; i < N; ++i) {
            while (s.size() && A[s.back()] >= A[i]) s.pop_back();
            if (s.size()) prev[i] = s.back();
            s.push_back(i);
        }
        s.clear();
        for (int i = N - 1; i >= 0; --i) {
            while (s.size() && A[s.back()] >= A[i]) s.pop_back();
            if (s.size()) next[i] = s.back();
            s.push_back(i);
        }
        for (int i = 0; i < N; ++i) {
            long long s = next[i] == -1 ? sum.back() : sum[next[i]];
            if (prev[i] != -1) {
                s -= sum[prev[i] + 1];
            }
            ans = max(ans, (long long) A[i] * s);
        }
        return ans % mod;
    }
};

Q3 (Histogram area) ///////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    vector<int>LeftIndex(vector<int>& arr,int n)
      {
           vector<int>left;
           stack<pair<int,int>>s;
           int pseudoIndex=-1;
           for(int i=0;i<n;i++)
           {
               if(s.size()==0) left.push_back(pseudoIndex);
               else if(s.size()>0 && s.top().first<arr[i]) left.push_back(s.top().second);
               else if(s.size()>0 && s.top().first>=arr[i])
               {
                      while(s.size()>0 && s.top().first>=arr[i]) {s.pop();}
                      if(s.size()==0) left.push_back(pseudoIndex); 
                      else left.push_back(s.top().second);
               }
               s.push({arr[i],i});
        } 
           return left;
    }       
    vector<int>RightIndex(vector<int>& arr,int n)
    {
        vector<int>right;
        stack<pair<int,int>>s1;
        int pseudoIndex2=n;
        for(int i=n-1;i>=0;i--)
        {
            if(s1.size()==0) right.push_back(pseudoIndex2);
            else if(s1.size()>0 && s1.top().first<arr[i]) right.push_back(s1.top().second);
            else if(s1.size()>0 && s1.top().first>=arr[i])
            {
                while(s1.size()>0 && s1.top().first>=arr[i]) {s1.pop();}
                if(s1.size()==0)right.push_back(pseudoIndex2); 
                else right.push_back(s1.top().second);      
            }
            s1.push({arr[i],i});
        }
        reverse(right.begin(),right.end());
        return right;
    }
    int largestRectangleArea(vector<int>& arr) {
        
       int n = arr.size(); 
       vector<int>left  =LeftIndex(arr,n);
       vector<int>right =RightIndex(arr,n);
       int area=0;
       int mx=INT_MIN;
       for(int i=0;i<n;i++)
       {
           int width=right[i]-left[i]-1;
           area=arr[i]*width;
           mx=max(mx,area);
       }
       return mx;
    }
};


