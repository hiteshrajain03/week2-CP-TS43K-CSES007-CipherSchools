Q1 (Serialize and deserialize BT) /////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Codec {
public:

    string serialize(TreeNode* root) {
        if(!root) return "";
        string s="";
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node=q.front();
            q.pop();
            if(node==NULL) s.append("#,");
            else s.append(to_string(node->val)+',');
            if(node!=NULL){
                q.push(node->left);
                q.push(node->right);
            }
        }
        return s;
    }

    TreeNode* deserialize(string data) {
        if(data.size()==0) return NULL;
        stringstream s(data);
        string str;
        getline(s,str,',');
        TreeNode* root=new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node=q.front();
            q.pop();
            getline(s,str,',');
            if(str=="#"){
                node->left=NULL;
            }
            else{
                TreeNode* left=new TreeNode(stoi(str));
                node->left=left;
                q.push(left);
            }
            getline(s,str,',');
            if(str=="#"){
                node->right=NULL;
            }
            else{
                TreeNode* right=new TreeNode(stoi(str));
                node->right=right;
                q.push(right);
            }
        }
        return root;
    }
};

Q2 (Root to leaf path) ///////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    void dfs(TreeNode* root, vector<vector<int>> &v, vector<int> &a) {
        if(!root) {
            return;
        }
        a.push_back(root->val);
        if(root->left == NULL && root->right == NULL) {
            v.push_back(a);
        }
        dfs(root->left, v, a);
        dfs(root->right, v, a);
        a.pop_back();
        return;
    }

    vector<string> binaryTreePaths(TreeNode* root) {
        vector<vector<int>> v;
        vector<int> a;
        dfs(root, v, a);
        vector<string> ans;
        for(int i = 0; i < v.size(); i++) {
            string s = "";
            s += to_string(v[i][0]);
            for(int j = 1; j < v[i].size(); j++) {
                s += "->";
                s += to_string(v[i][j]);
            }
            ans.push_back(s);
        }
        return ans;
    }
};

Q3 (ancestors of BT) //////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool printAncestors(struct node *root, int target)
{
if (root == NULL)
	return false;
if (root->data == target)
	return true;
if ( printAncestors(root->left, target) ||
	printAncestors(root->right, target) )
{
	cout << root->data << " ";
	return true;
}
return false;
}

Q4 (LCA of BT) /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL || root == p || root == q) {
            return root;
        }
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if(left == NULL) {
            return right;
        }
        if(right == NULL) {
            return left;
        }
        else {
            return root;
        }
    }
};





