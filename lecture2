Q1 (Valid Paranthesis) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for(int i = 0; i < s.length(); i++) {
            if(st.empty()) {
                st.push(s[i]);
            }
            else {
                if(st.top() == '(' && s[i] == ')') {
                    st.pop();
                }
                else if(st.top() == '{' && s[i] == '}') {
                    st.pop();
                }
                else if(st.top() == '[' && s[i] == ']') {
                    st.pop();
                }
                else {
                    st.push(s[i]);
                }
            }
        }
        if(st.empty()) {
            return true;
        }
        else {
            return false;
        }
    }
};

Q2 (Minimum number of swaps to make string balanced) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int minSwaps(string s) {
        stack<char> st;
        for(char &ch:s){
          if(ch=='[')  st.push(ch);
          else if(!st.empty()) st.pop();
        }
        return (st.size()+1)/2;
    }
};



